// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                  Int                 @default(autoincrement()) @id
  nombres             String
  apellidos           String
  email               String              @unique
  password            String
  telefono            String
  direccion           String?
  tipoDocumento       String
  numeroDocumento     String              @unique

  rolId               Int                 
  rol                 Roles               @relation(fields: [rolId], references: [id])

  profesores          Profesores[]
  estudiantes         Estudiantes[]
  

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model Roles {
  id                  Int                 @default(autoincrement()) @id
  nombre              String
  descripcion         String

  users               Users[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model Universidades {
  id                  Int                 @default(autoincrement()) @id
  nombre              String
  direccion           String
  telefono            String

  programas           Programas[]
  profesores          Profesores[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model Programas {
  id                  Int                 @default(autoincrement()) @id
  codigoPrograma      String              @unique
  nombre              String
 
  grupos              Grupos[]

  universidadId       Int
  universidad         Universidades       @relation(fields: [universidadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt   
}

model Asignaturas {
  id                  Int                 @default(autoincrement()) @id
  codigoAsignatura    String              @unique
  nombre              String

  asignaturaProfesores AsignaturaProfesor[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt   
}

model Grupos {
  id                  Int                 @default(autoincrement()) @id
  codigoGrupo         String              @unique

  programaId          Int
  programa            Programas           @relation(fields: [programaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  estudiantes         Estudiantes[]     
  horarios            AsignaturaGrupo[]     

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt   
}

model AsignaturaGrupo {
  id                  Int                 @default(autoincrement()) @id
  horaInicio          String
  horaFin             String
  fecha               String

  asignaturaProfesorId Int
  asignaturaProfesor  AsignaturaProfesor  @relation(fields: [asignaturaProfesorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  grupoId             Int
  grupo               Grupos              @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model Profesores {
  id                  Int                 @default(autoincrement()) @id

  userId              Int
  user                Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  universidadId       Int
  universidad         Universidades       @relation(fields: [universidadId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  asignaturas         AsignaturaProfesor[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model AsignaturaProfesor {
  id                  Int                @default(autoincrement()) @id

  asignaturaId        Int
  asignatura          Asignaturas          @relation(fields: [asignaturaId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  profesorId          Int
  profesor            Profesores          @relation(fields: [profesorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  horarios            AsignaturaGrupo[]

  notas               Notas[]
  asistencias         Asistencias[]

}

// 
model Instituciones {
  id                  Int                 @default(autoincrement()) @id
  nombre              String
  direccion           String?
  telefono            String

  estudiantes         Estudiantes[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

model Estudiantes {
  id                  Int                 @default(autoincrement()) @id
  codigoEstudiante    String              @unique

  userId              Int
  user                Users               @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  institucionId       Int
  institucion         Instituciones       @relation(fields: [institucionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  grupoId             Int
  grupo               Grupos              @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  notas               Notas[]
  asistencias         Asistencias[]

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}


model Notas {
  id                  Int                 @default(autoincrement()) @id
  nota                Float
  fecha               String
  observacion         String?

  asignaturaProfesorId Int
  asignaturaProfesor  AsignaturaProfesor  @relation(fields: [asignaturaProfesorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  estudianteId        Int
  estudiante          Estudiantes         @relation(fields: [estudianteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt   
}

model Asistencias {
  id                  Int                 @default(autoincrement()) @id
  asiste              Boolean
  fecha               String
  observacion         String?

  asignaturaProfesorId Int
  asignaturaProfesor  AsignaturaProfesor  @relation(fields: [asignaturaProfesorId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  estudianteId        Int
  estudiante          Estudiantes         @relation(fields: [estudianteId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt   
}

// 
model Informes {
  id                  Int                 @default(autoincrement()) @id

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}


model Dashboard {
  id                  Int                 @default(autoincrement()) @id

  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt  
}

